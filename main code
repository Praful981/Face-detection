import cv2
import numpy as np
import face_recognition
import os
from datetime import datetime

path = 'photos'
images = []
classNames = []
myList = os.listdir(path)
print(myList)
for cl in myList:
    img_path = os.path.join(path, cl)
    print(img_path)
    curImg = cv2.imread(img_path)
    images.append(curImg)
    classNames.append(os.path.splitext(cl)[0])
print(classNames)

attendance = set()
attendance_file = ""

def findEncodings(directory):
    encodeList = []
    classNames = []
    for root, dirs, files in os.walk(directory):
        if len(files) > 0:
            for file in files:
                img_path = os.path.join(root, file).replace("\\", "/")
                img = cv2.imread(img_path)
                if img is not None:
                    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
                    face_encodings = face_recognition.face_encodings(img)
                    if len(face_encodings) > 0:
                        encodeList.append(face_encodings[0])
                        person_name = os.path.basename(root)
                        classNames.append(person_name)
    return encodeList, classNames

def markAttendance(name):
    if name not in attendance:
        attendance.add(name)
        time_now = datetime.now()
        tString = time_now.strftime('%H_%M_%S')
        dString = time_now.strftime('%d-%m-%Y')
        global attendance_file
        if attendance_file == "":
            attendance_file = f'Attendance_{dString}_{tString}.csv'
            with open(attendance_file, 'w') as f:
                f.write('Name, Time, Date\n')
        with open(attendance_file, 'a') as f:
            f.write(f'{name}, {tString}, {dString}\n')

encodeListKnown, classNames = findEncodings('photos')
#encodeListKnown = findEncodings(images)
print('Encoding Complete')

cap = cv2.VideoCapture(0)

while True:
    success, img = cap.read()
    imgS = cv2.resize(img, (0, 0), None, 0.25, 0.25)
    imgS = cv2.cvtColor(imgS, cv2.COLOR_BGR2RGB)

    facesCurFrame = face_recognition.face_locations(imgS)
    encodesCurFrame = face_recognition.face_encodings(imgS, facesCurFrame)

    for encodeFace, faceLoc in zip(encodesCurFrame, facesCurFrame):
        matches = face_recognition.compare_faces(encodeListKnown, encodeFace)
        faceDis = face_recognition.face_distance(encodeListKnown, encodeFace)
        print(faceDis)
        matchIndex = np.argmin(faceDis)
        name = "Unknown"

        if matches[matchIndex]:
            name = classNames[matchIndex].upper()


        y1, x2, y2, x1 = faceLoc
        y1, x2, y2, x1 = y1 * 4, x2 * 4, y2 * 4, x1 * 4

        if name != "Unknown":
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
            cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 250, 0), cv2.FILLED)
            cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)
            markAttendance(name)
        else:
            cv2.rectangle(img, (x1, y1), (x2, y2), (0, 0, 255), 2)
            cv2.rectangle(img, (x1, y2 - 35), (x2, y2), (0, 0, 255), cv2.FILLED)
            cv2.putText(img, name, (x1 + 6, y2 - 6), cv2.FONT_HERSHEY_COMPLEX, 1, (255, 255, 255), 2)

    cv2.imshow('webcam', img)
    if cv2.waitKey(10) == 13:
        break


